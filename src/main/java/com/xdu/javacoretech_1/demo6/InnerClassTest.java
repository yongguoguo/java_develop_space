package com.xdu.javacoretech_1.demo6;

/**
 * 内部类是定义在另一个类中的类
 * 优点：可以对同一个包的其他类隐藏
 * 内部类方法可以访问定义这个类的作用域的数据（包括私有方法）
 * 内部类是如何拿到更高的访问权限的呢，通过反射我们看到内部类在
 * 编译的时候，编译器会添加一个新的静态方法access方法
 * 将返回我们需要的那个字段的参数
 *
 *
 *
 * 内部类对象总有一个隐式引用（outer），指向他的外部类对象
 * 引用是在内部类的构造器中实现，编译器会修改所有内部类的构造器，添加外部类引用的参数
 *
 *
 *OuterClass.this 表示外围类的引用
 *
 *
 * 内部类声明的所有静态字段都必须是final，并初始化为一个编译时常量
 * 内部类不能有static方法，有的话只能访问外围类的static方法和字段
 *
 *
 * 内部类是一个编译器现象，和虚拟机无关
 * 内部类是如何拿到更高的访问权限的呢，通过反射我们看到内部类在
 *  * 编译的时候，编译器会添加一个新的静态方法access方法
 *  * 将返回我们需要的那个字段的参数
 *
 *
 * 局部内部类：当内部类定义在方法时，
 * 局部内部类不能有修饰符（public、或private）
 * 局部类的优势：他们不仅能 访问外部类的字段，还可以访问局部变量（不过变量必须是final类型的）
 * 在方法中将参数复制到实例中，防止方法结束之后对象消失
 *
 *
 *
 *
 * 匿名内部类
 * 语法为new supertype（parameter）{
 *     内部类的方法和参数
 * }
 *
 *
 *静态内部类
 *
 *
 */
public class InnerClassTest {
}
